---
import { getRelativeLocaleUrl } from 'astro:i18n'
import { getCollection, getEntries, getEntry } from 'astro:content'
import type { CollectionEntry } from 'astro:content'

type ProjectEntry = CollectionEntry<'projects'>
type TechEntry = CollectionEntry<'tech'>

const { data: { see_more }  } = await getEntry('texts', Astro.currentLocale)
const { onlyRelevants = true } = Astro.props

const locale = Astro.currentLocale ?? 'es'
const projects = await getCollection('projects', (project: ProjectEntry) => (project.slug.split('/')[0] === locale) && (!onlyRelevants || project.data.relevant))
                    .map((project: ProjectEntry) => ({
                      ...project.data,
                      slug: project.slug,
                      render: project.render
                    }))
---
<div class="grid grid-cols-2">
  {projects.map(async (project: ProjectEntry) => {
    const tech = (await getEntries(project.tech)).map((tech: TechEntry) => tech.data.name)
    const transitionName = "project#" + project.slug
    const { Content } = await project.render()
    
    return <div>
      <div transition:name={transitionName} transition:animate="initial">
        {project.name ? <span class="font-bold">{project.name}: </span> : ''}
        <span>{project.explanation}</span>
      </div>
      <Content />
      <div>
        {JSON.stringify(tech)}
      </div>
    </div>
  })}
</div>
<div class="flex align-center">
  <a type="button" href={getRelativeLocaleUrl(locale, 'projects')} class="mx-auto rounded transition-colors border border-black hover:bg-black hover:text-white dark:hover:bg-white dark:hover:text-black dark:border-white p-2">{see_more}</a>
</div>
