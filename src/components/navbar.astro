---
import { getEntry } from 'astro:content'
import { getRelativeLocaleUrl } from 'astro:i18n'
import Logo from '@Componentes/logo.astro'

interface Props {
  sections: {
    url: string,
    name: string
  }[]
}

const { sections } = Astro.props
const locale = Astro.currentLocale ?? 'es'
const themeText = (await getEntry('texts', locale)).data.theme
---
<nav class="flex flex-row">
  <div class="flex items-center pl-4 [&>svg]:size-10">
    <Logo />
  </div>
  <p class="grow font-serif font-bold p-4">Juan G. Quispe H.</p>
  <div class="shrink flex flex-row pr-4">
    {sections.map(section => (
      <a class="p-4 hover:bg-slate-100 dark:hover:bg-slate-900" href={getRelativeLocaleUrl(locale, section.url)}>{section.name}</a>
    ))}
    <astro-theme>
      <button class="h-full px-4 py-1 hover:bg-slate-100 dark:hover:bg-slate-900">
        <p>{themeText}</p>
        <svg class="fill-black dark:fill-white mx-auto" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" />
      </button>
    </astro-theme>
  </div>
</nav>
<script is:inline>
  class AstroTheme extends HTMLElement {

    connectedCallback() {
      const themeSwitcher = this.querySelector('button')
      const themeSvg = themeSwitcher.querySelector('svg')

      // Set default icon for the SVG
      function switchIcon(isDarkTheme) {
        if (isDarkTheme) {
          themeSvg.innerHTML = AstroTheme.iconMoon()
        } else {
          themeSvg.innerHTML = AstroTheme.iconSun()
        }
      }
      switchIcon(AstroTheme.isDarkTheme())
            
      // Add click event to change the theme and icon in SVG
      themeSwitcher.addEventListener('click', () => {
        const isDarkTheme = !AstroTheme.isDarkTheme()
      
        localStorage.setItem('darkTheme', isDarkTheme)
        AstroTheme.setTheme(isDarkTheme, document)
        switchIcon(isDarkTheme)
      })
    }

    /**
    * Sets the theme of the website to either light or dark theme
    * This is based on the function "isDarkTheme"
    * @param {boolean} isDarkTheme
    */
    static setTheme(isDarkTheme, document) {
      if (isDarkTheme) {
        // If setting dark theme, add class to HTML tag
        document.documentElement.classList.add("dark")
      } else {
        // If not, then remove the already set one
        document.documentElement.classList.remove("dark")
      }
    }

    /**
    * Checks whether or not the website is supposed to be in dark theme
    * @returns {boolean}
    */
    static isDarkTheme() {
      // Check if running in Astro's SSG mode
      if (typeof localStorage !== 'undefined') {
        // If running on browser, check if preference is already set
        if (localStorage.getItem("darkTheme")) {
          // If it has been set, return that preference
          // Using JSON.parse since it is converted to string in the LocalStorage
          return JSON.parse(localStorage.getItem("darkTheme"))
        }
      }

      // If running in Astro's SSG mode or preference not set, check browser default
      return window.matchMedia("(prefers-color-scheme: dark)").matches
    }

    /**
    * Returns the icon of a sun
    * SVG taken from https://tabler.io/icons
    * @returns {string}
    */
    static iconSun() {
      return '<path d="M12 19a1 1 0 0 1 .993 .883l.007 .117v1a1 1 0 0 1 -1.993 .117l-.007 -.117v-1a1 1 0 0 1 1 -1z" /><path d="M18.313 16.91l.094 .083l.7 .7a1 1 0 0 1 -1.32 1.497l-.094 -.083l-.7 -.7a1 1 0 0 1 1.218 -1.567l.102 .07z" /><path d="M7.007 16.993a1 1 0 0 1 .083 1.32l-.083 .094l-.7 .7a1 1 0 0 1 -1.497 -1.32l.083 -.094l.7 -.7a1 1 0 0 1 1.414 0z" /><path d="M4 11a1 1 0 0 1 .117 1.993l-.117 .007h-1a1 1 0 0 1 -.117 -1.993l.117 -.007h1z" /><path d="M21 11a1 1 0 0 1 .117 1.993l-.117 .007h-1a1 1 0 0 1 -.117 -1.993l.117 -.007h1z" /><path d="M6.213 4.81l.094 .083l.7 .7a1 1 0 0 1 -1.32 1.497l-.094 -.083l-.7 -.7a1 1 0 0 1 1.217 -1.567l.102 .07z" /><path d="M19.107 4.893a1 1 0 0 1 .083 1.32l-.083 .094l-.7 .7a1 1 0 0 1 -1.497 -1.32l.083 -.094l.7 -.7a1 1 0 0 1 1.414 0z" /><path d="M12 2a1 1 0 0 1 .993 .883l.007 .117v1a1 1 0 0 1 -1.993 .117l-.007 -.117v-1a1 1 0 0 1 1 -1z" /><path d="M12 7a5 5 0 1 1 -4.995 5.217l-.005 -.217l.005 -.217a5 5 0 0 1 4.995 -4.783z" />'
    }

    /**
    * Returns the icon of a moon
    * SVG taken from https://tabler.io/icons
    * @returns {string}
    */
    static iconMoon() {
      return '<path d="M12 1.992a10 10 0 1 0 9.236 13.838c.341 -.82 -.476 -1.644 -1.298 -1.31a6.5 6.5 0 0 1 -6.864 -10.787l.077 -.08c.551 -.63 .113 -1.653 -.758 -1.653h-.266l-.068 -.006l-.06 -.002z" />'
    }
  }

  AstroTheme.setTheme(AstroTheme.isDarkTheme(), document)
  customElements.define('astro-theme', AstroTheme)
  document.addEventListener('astro:before-swap', ({ newDocument }) => AstroTheme.setTheme(AstroTheme.isDarkTheme(), newDocument))
</script>
